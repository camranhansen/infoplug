def parsePacket(packet):
	data=[]
	T = packet.split(";")
	for t in T:
		timestep=[]
		readings = t.split(",")
		#print readings
		if len(readings) == 2:
			for s in readings:
				# todo: error checking/handeling 
				if s != "":
					timestep.append(int(s))
			data.append(timestep)	
	return data


print parsePacket("477,0;476,0;477,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;483,0;483,0;482,0;480,0;478,0;478,0;478,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;470,0;470,0;471,0;474,0;475,0;476,0;476,0;476,0;476,0;477,0;476,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;476,0;477,0;477,0;476,0;476,0;476,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;476,0;482,0;483,0;483,0;480,0;479,0;478,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;473,0;470,0;471,0;472,0;475,0;475,0;475,0;476,0;476,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;470,0;470,0;472,0;474,0;476,0;476,0;476,0;475,0;476,0;477,0;477,0;476,0;477,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;476,0;482,0;483,0;482,0;480,0;478,0;478,0;478,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;476,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;472,0;470,0;471,0;473,0;475,0;476,0;476,0;476,0;477,0;476,0;476,0;477,0;477,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;479,0;483,0;482,0;480,0;479,0;478,0;478,0;478,0;477,0;477,0;477,0;477,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;470,0;470,0;472,0;474,0;475,0;475,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;476,0;476,0;477,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;477,0;477,0;476,0;470,0;470,0;471,0;473,0;475,0;475,0;475,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;476,0;476,0;477,0;477,0;476,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;480,0;484,0;482,0;480,0;478,0;478,0;478,0;478,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;476,0;476,0;477,0;477,0;476,0;477,0;476,0;477,0;477,0;477,0;474,0;470,0;471,0;472,0;474,0;475,0;475,0;476,0;476,0;477,0;476,0;477,0;476,0;477,0;477,0;476,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;477,0;476,0;477,0;477,0;477,0;477,0;477,0;477,0;484,0;483,0;481,0;479,0;478,0;478,0;478,0;477,0;477,0;477,0;477,0")